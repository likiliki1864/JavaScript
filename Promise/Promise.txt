Promise:

*A Promise in JavaScript is an object that represents the eventual completion of an
 asynchronous operation and its resulting value. 
*Promises provide a cleaner way to handle asynchronous tasks compared to traditional
 callback functions, making code more readable and easier to maintain.
*A promise is created using the Promise constructor, which takes a executor function as
 an argument. This executor function has two arguments, "resolve" to mark the promise as
 fulfilled and "reject" to mark it as rejected.

->3 states of Promise:- 

    -Pending: The initial state, neither fulfilled nor rejected.
    -Fulfilled: The operation completed successfully and the promise is resolved with a value.
    -Rejected: The operation failed and the promise is rejected with a reason.

    
Example:-
        const myPromise = new Promise((resolve, reject) => {
        let success = true;

        if (success) {
            resolve("Operation succeeded!");
        } else {
            reject("Operation failed!");
        }
        });

        myPromise
        .then(result => {
            console.log(result);  // Logs: "Operation succeeded!" if resolved
        })
        .catch(error => {
            console.log(error);  // Logs: "Operation failed!" if rejected
        })
        .finally(() => {
            console.log("Promise completed");  // Always executed
        });

    Promise Methods:-
        .then(): Attaches callbacks for success (resolve) and returns a new promise. It allows you to chain multiple asynchronous actions.
        .catch(): Attaches a callback for handling errors.
        .finally(): Attaches a callback that runs regardless of whether the promise was resolved or rejected.

->Promises made by chaining:-
    
    
Example:-
            const promise1 = new Promise((resolve, reject) => {
            resolve("First promise resolved");
             });

            promise1
            .then(result => {
                console.log(result); // Logs: "First promise resolved"
                return "Second promise resolved";
            })
            .then(result => {
                console.log(result); // Logs: "Second promise resolved"
            })
            .catch(error => {
                console.error(error);
            });

Static Methods:-

->Promise.all(iterable):
*Resolves when all Promises in the iterable are fulfilled, or rejects if any Promise is rejected.


Syntax:Promise.all([promise1, promise2]).then(results => {
    // handle results
}).catch(error => {
    // handle error
});

Example:
let promise1 = Promise.resolve(10);
let promise2 = Promise.resolve(20);

Promise.all([promise1, promise2]).then(values => {
    console.log(values); // [10, 20]
});

->Promise.allSettled(iterable):
*Resolves when all Promises are either fulfilled or rejected, returning an array of results.

Syntax:Promise.allSettled([promise1, promise2]).then(results => {
    // handle settled results
});

Example:
let promise1 = Promise.resolve(10);
let promise2 = Promise.reject(new Error("Failure"));

Promise.allSettled([promise1, promise2]).then(results => {
    console.log(results);
    // [{status: "fulfilled", value: 10}, {status: "rejected", reason: Error: Failure}]
});

->Promise.any(iterable):
*Resolves with the first fulfilled Promise or rejects if all Promises are rejected.

Syntax:
Promise.any([promise1, promise2]).then(result => {
    // handle first resolved result
}).catch(error => {
    // handle all promises rejected
});

Example:
let promise1 = Promise.reject("Error 1");
let promise2 = Promise.resolve(20);

Promise.any([promise1, promise2]).then(value => {
    console.log(value); // 20
});
->Promise.race(iterable):
*Resolves or rejects as soon as any Promise in the iterable is settled (resolved or rejected).

Syntax:
Promise.race([promise1, promise2]).then(result => {
    // handle first settled result
});

Example:
let promise1 = new Promise(resolve => setTimeout(resolve, 100, "slow"));
let promise2 = new Promise(resolve => setTimeout(resolve, 50, "fast"));

Promise.race([promise1, promise2]).then(value => {
    console.log(value); // "fast"
});

->Promise.resolve(value):
*Returns a Promise that is resolved with the given value.

Syntax:
Promise.resolve(value).then(result => {
    // handle result
});

Example:
Promise.resolve(42).then(value => {
    console.log(value); // 42
});

->Promise.reject(reason):
*Returns a Promise that is rejected with the given reason.

Syntax:
Promise.reject(reason).catch(error => {
    // handle rejection
});

Example:
Promise.reject(new Error("Failure")).catch(error => {
    console.log(error.message); // "Failure"
});